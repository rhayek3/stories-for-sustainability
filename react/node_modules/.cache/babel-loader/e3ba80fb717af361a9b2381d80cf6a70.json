{"ast":null,"code":"import _defineProperty from \"/Users/samiakhan/Dropbox/Fall2019/stories-for-sustainability/react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nconst config = {\n  apiKey: \"AIzaSyC8Q9QITqvoKM_rqja6HUtgrOtfTDVcVBc\",\n  authDomain: \"stories-for-sustainability.firebaseapp.com\",\n  databaseURL: \"https://stories-for-sustainability.firebaseio.com\",\n  projectId: \"stories-for-sustainability\",\n  storageBucket: \"\",\n  messagingSenderId: \"225361778986\",\n  appId: \"1:225361778986:web:c60e58e013babdd255a653\"\n};\n\nclass Firebase {\n  constructor() {\n    this.doCreateUserWithEmailAndPassword = (email, password) => this.auth.createUserWithEmailAndPassword(email, password);\n\n    this.doSignInWithEmailAndPassword = (email, password) => this.auth.signInWithEmailAndPassword(email, password);\n\n    this.doSignOut = () => this.auth.signOut();\n\n    this.doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n    this.doPasswordUpdate = password => this.auth.currentUser.updatePassword(password);\n\n    this.onAuthUserListener = (next, fallback) => this.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        this.user(authUser.uid).once('value').then(snapshot => {\n          const dbUser = snapshot.val(); // default empty roles\n\n          if (!dbUser.roles) {\n            dbUser.roles = {};\n          } // merge auth and db user\n\n\n          authUser = _objectSpread({\n            uid: authUser.uid,\n            email: authUser.email\n          }, dbUser);\n          next(authUser);\n        });\n      } else {\n        fallback();\n      }\n    });\n\n    this.user = uid => this.db.ref(\"users/\".concat(uid));\n\n    this.users = () => this.db.ref('users');\n\n    app.initializeApp(config);\n    this.auth = app.auth();\n    this.db = app.database();\n  } // *** Auth API ***\n\n\n}\n\nexport default Firebase;","map":{"version":3,"sources":["/Users/samiakhan/Dropbox/Fall2019/stories-for-sustainability/react/src/components/Firebase/firebase.js"],"names":["app","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Firebase","constructor","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","currentUser","updatePassword","onAuthUserListener","next","fallback","onAuthStateChanged","authUser","user","uid","once","then","snapshot","dbUser","val","roles","db","ref","users","initializeApp","database"],"mappings":";;;;;;AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAO,eAAP;AACA,OAAO,mBAAP;AAGA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,4CAFD;AAGXC,EAAAA,WAAW,EAAE,mDAHF;AAIXC,EAAAA,SAAS,EAAE,4BAJA;AAKXC,EAAAA,aAAa,EAAE,EALJ;AAMXC,EAAAA,iBAAiB,EAAE,cANR;AAOXC,EAAAA,KAAK,EAAE;AAPI,CAAf;;AAWA,MAAMC,QAAN,CAAe;AACbC,EAAAA,WAAW,GAAG;AAAA,SAOZC,gCAPY,GAOuB,CAACC,KAAD,EAAQC,QAAR,KACnC,KAAKC,IAAL,CAAUC,8BAAV,CAAyCH,KAAzC,EAAgDC,QAAhD,CARY;;AAAA,SAUZG,4BAVY,GAUmB,CAACJ,KAAD,EAAQC,QAAR,KAC/B,KAAKC,IAAL,CAAUG,0BAAV,CAAqCL,KAArC,EAA4CC,QAA5C,CAXY;;AAAA,SAaZK,SAbY,GAaA,MAAM,KAAKJ,IAAL,CAAUK,OAAV,EAbN;;AAAA,SAeZC,eAfY,GAeMR,KAAK,IAAI,KAAKE,IAAL,CAAUO,sBAAV,CAAiCT,KAAjC,CAff;;AAAA,SAgBZU,gBAhBY,GAgBOT,QAAQ,IACzB,KAAKC,IAAL,CAAUS,WAAV,CAAsBC,cAAtB,CAAqCX,QAArC,CAjBU;;AAAA,SAqBdY,kBArBc,GAqBO,CAACC,IAAD,EAAOC,QAAP,KACnB,KAAKb,IAAL,CAAUc,kBAAV,CAA6BC,QAAQ,IAAI;AACvC,UAAIA,QAAJ,EAAc;AACZ,aAAKC,IAAL,CAAUD,QAAQ,CAACE,GAAnB,EACGC,IADH,CACQ,OADR,EAEGC,IAFH,CAEQC,QAAQ,IAAI;AAChB,gBAAMC,MAAM,GAAGD,QAAQ,CAACE,GAAT,EAAf,CADgB,CAEhB;;AACA,cAAI,CAACD,MAAM,CAACE,KAAZ,EAAmB;AACjBF,YAAAA,MAAM,CAACE,KAAP,GAAe,EAAf;AACD,WALe,CAMhB;;;AACAR,UAAAA,QAAQ;AACNE,YAAAA,GAAG,EAAEF,QAAQ,CAACE,GADR;AAENnB,YAAAA,KAAK,EAAEiB,QAAQ,CAACjB;AAFV,aAGHuB,MAHG,CAAR;AAKAT,UAAAA,IAAI,CAACG,QAAD,CAAJ;AACD,SAfH;AAgBD,OAjBD,MAiBO;AACLF,QAAAA,QAAQ;AACT;AACF,KArBD,CAtBY;;AAAA,SA8CZG,IA9CY,GA8CLC,GAAG,IAAI,KAAKO,EAAL,CAAQC,GAAR,iBAAqBR,GAArB,EA9CF;;AAAA,SA+CZS,KA/CY,GA+CJ,MAAM,KAAKF,EAAL,CAAQC,GAAR,CAAY,OAAZ,CA/CF;;AACZvC,IAAAA,GAAG,CAACyC,aAAJ,CAAkBxC,MAAlB;AACA,SAAKa,IAAL,GAAYd,GAAG,CAACc,IAAJ,EAAZ;AACA,SAAKwB,EAAL,GAAUtC,GAAG,CAAC0C,QAAJ,EAAV;AAED,GANY,CAOb;;;AAPa;;AAmDf,eAAejC,QAAf","sourcesContent":["import app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\n\n\nconst config = {\n    apiKey: \"AIzaSyC8Q9QITqvoKM_rqja6HUtgrOtfTDVcVBc\",\n    authDomain: \"stories-for-sustainability.firebaseapp.com\",\n    databaseURL: \"https://stories-for-sustainability.firebaseio.com\",\n    projectId: \"stories-for-sustainability\",\n    storageBucket: \"\",\n    messagingSenderId: \"225361778986\",\n    appId: \"1:225361778986:web:c60e58e013babdd255a653\"\n  };\n\n  \nclass Firebase {\n  constructor() {\n    app.initializeApp(config);\n    this.auth = app.auth();\n    this.db = app.database();\n\n  }\n  // *** Auth API ***\n    doCreateUserWithEmailAndPassword = (email, password) =>\n    this.auth.createUserWithEmailAndPassword(email, password);\n\n    doSignInWithEmailAndPassword = (email, password) =>\n    this.auth.signInWithEmailAndPassword(email, password);\n\n    doSignOut = () => this.auth.signOut();\n\n    doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n    doPasswordUpdate = password =>\n      this.auth.currentUser.updatePassword(password);\n\n    \n  // *** Merge Auth and DB User API *** //\n  onAuthUserListener = (next, fallback) =>\n    this.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        this.user(authUser.uid)\n          .once('value')\n          .then(snapshot => {\n            const dbUser = snapshot.val();\n            // default empty roles\n            if (!dbUser.roles) {\n              dbUser.roles = {};\n            }\n            // merge auth and db user\n            authUser = {\n              uid: authUser.uid,\n              email: authUser.email,\n              ...dbUser,\n            };\n            next(authUser);\n          });\n      } else {\n        fallback();\n      }\n    });\n\n  // *** User API ***\n    user = uid => this.db.ref(`users/${uid}`);\n    users = () => this.db.ref('users');\n\n}\nexport default Firebase;"]},"metadata":{},"sourceType":"module"}