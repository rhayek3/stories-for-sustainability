{"version":3,"sources":["../src/useFirestoreConnect.js"],"names":["useFirestoreConnect","querySettings","firestore","firestoreIsEnabled","queryRef","data","current","changes","unsetListeners","removed","setListeners","added"],"mappings":"4WAsDe,QAASA,CAAAA,mBAAT,CAA6BC,aAA7B,CAA4C,IACnDC,CAAAA,SAAS,CAAG,2BADuC,CAEnDC,kBAAkB,CAAG,CAAC,CAACD,SAF4B,CAGnDE,QAAQ,CAAG,mBAHwC,CAKnDC,IAAI,CAAG,mBAAQ,iBAAM,4BAAiBJ,aAAjB,CAAN,CAAR,CAA+C,CAACA,aAAD,CAA/C,CAL4C,CAOzD,qBACE,UAAM,CACJ,GAAIE,kBAAkB,EAAI,CAAC,sBAAQE,IAAR,CAAcD,QAAQ,CAACE,OAAvB,CAA3B,CAA4D,CAC1D,GAAMC,CAAAA,OAAO,CAAG,sBAAWF,IAAX,CAAiBD,QAAQ,CAACE,OAA1B,CAAhB,CAEAF,QAAQ,CAACE,OAAT,CAAmBD,IAHuC,CAM1DH,SAAS,CAACM,cAAV,CAAyBD,OAAO,CAACE,OAAjC,CAN0D,CAS1DP,SAAS,CAACQ,YAAV,CAAuBH,OAAO,CAACI,KAA/B,CACD,CACF,CAbH,CAcE,CAACN,IAAD,CAdF,CAPyD,CAyBzD,qBAAU,UAAM,CACd,MAAO,WAAM,CACPF,kBAAkB,EAAIC,QAAQ,CAACE,OADxB,EAETJ,SAAS,CAACM,cAAV,CAAyBJ,QAAQ,CAACE,OAAlC,CAEH,CACF,CAND,CAMG,EANH,CAOD,C","sourcesContent":["import { isEqual } from 'lodash'\nimport { useRef, useMemo, useEffect } from 'react'\nimport { invokeArrayQuery, getChanges } from './utils'\nimport useFirestore from './useFirestore'\n\n/**\n * @name useFirestoreConnect\n * @description React hook that automatically listens/unListens\n * to provided Cloud Firestore paths. Make sure you have required/imported\n * Cloud Firestore, including it's reducer, before attempting to use.\n * **Note** Populate is not yet supported.\n * @param {Object|String|Array|Function} queriesConfig - An object, string,\n * or array of object or string for paths to sync from firestore. Can also be\n * a function that returns the object, string, or array of object or string.\n * @example <caption>Basic</caption>\n * import React from 'react'\n * import { map } from 'lodash'\n * import { useSelector } from 'react-redux'\n * import { useFirebaseConnect } from 'react-redux-firebase'\n *\n * function TodosList() {\n *   useFirebaseConnect('todos') // sync todos collection from Firestore into redux\n *   const todos = useSelector(state => state.firebase.data.todos)\n *   return (\n *     <ul>\n *       {map(todos, (todo, todoId) => (\n *        <li>id: {todoId} todo: {JSON.stringify(todo)}</li>\n *       ))}\n *    </ul>\n *   )\n * }\n * export default TodosList\n * @example <caption>Object as query</caption>\n * import React, { useMemo } from 'react'\n * import { get } from 'lodash'\n * import { connect } from 'react-redux'\n * import { useFirebaseConnect } from 'react-redux-firebase'\n *\n * function TodoItem({ todoId, todoData }) {\n *   useFirebaseConnect(() => ({\n *     collection: 'todos',\n *     doc: todoId\n *   }), [todoId]) // include dependency in the hook\n *\n *   return <div>{JSON.stringify(todoData)}</div>\n * }\n *\n * // pass todo data from redux as props.todosList\n * export default compose(\n *   connect((state) => ({\n *     todoData: get(state, ['firestore', 'data', 'todos', todoId])\n *   })\n * )(TodoItem)\n */\nexport default function useFirestoreConnect(querySettings) {\n  const firestore = useFirestore()\n  const firestoreIsEnabled = !!firestore\n  const queryRef = useRef()\n\n  const data = useMemo(() => invokeArrayQuery(querySettings), [querySettings])\n\n  useEffect(\n    () => {\n      if (firestoreIsEnabled && !isEqual(data, queryRef.current)) {\n        const changes = getChanges(data, queryRef.current)\n\n        queryRef.current = data\n\n        // Remove listeners for inactive subscriptions\n        firestore.unsetListeners(changes.removed)\n\n        // Add listeners for new subscriptions\n        firestore.setListeners(changes.added)\n      }\n    },\n    [data]\n  )\n\n  // Emulate componentWillUnmount\n  useEffect(() => {\n    return () => {\n      if (firestoreIsEnabled && queryRef.current) {\n        firestore.unsetListeners(queryRef.current)\n      }\n    }\n  }, [])\n}\n"],"file":"useFirestoreConnect.js"}