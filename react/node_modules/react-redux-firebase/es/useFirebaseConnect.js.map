{"version":3,"sources":["../src/useFirebaseConnect.js"],"names":["useFirebaseConnect","querySettings","firebase","eventRef","dataRef","data","current","itemsToSubscribe","itemsToUnsubscribe","dispatch"],"mappings":"qdAuEe,QAASA,CAAAA,kBAAT,CAA4BC,aAA5B,CAA2C,IAClDC,CAAAA,QAAQ,CAAG,0BADuC,CAElDC,QAAQ,CAAG,mBAFuC,CAGlDC,OAAO,CAAG,mBAHwC,CAKlDC,IAAI,CAAG,mBAAQ,iBAAM,4BAAiBJ,aAAjB,CAAN,CAAR,CAA+C,CAACA,aAAD,CAA/C,CAL2C,CAOxD,qBACE,UAAM,CACJ,GAAa,IAAT,GAAAI,IAAI,EAAa,CAAC,sBAAQA,IAAR,CAAcD,OAAO,CAACE,OAAtB,CAAtB,CAAsD,IAC9CC,CAAAA,gBAAgB,CAAG,6BAAeF,IAAf,CAAqBD,OAAO,CAACE,OAA7B,mBAD2B,CAE9CE,kBAAkB,CAAG,6BACzBJ,OAAO,CAACE,OADiB,CAEzBD,IAFyB,mBAFyB,CAQpDD,OAAO,CAACE,OAAR,CAAkBD,IARkC,CAUpD,yBACEH,QADF,CAEEA,QAAQ,CAACO,QAFX,CAGE,8BAAmBD,kBAAnB,CAHF,CAVoD,CAgBpDL,QAAQ,CAACG,OAAT,CAAmB,8BAAmBD,IAAnB,CAhBiC,CAmBpD,uBACEH,QADF,CAEEA,QAAQ,CAACO,QAFX,CAGE,8BAAmBF,gBAAnB,CAHF,CAKD,CACF,CA3BH,CA4BE,CAACF,IAAD,CA5BF,CAPwD,CAuCxD,qBAAU,UAAM,CACd,MAAO,WAAM,CACX,yBAAcH,QAAd,CAAwBA,QAAQ,CAACO,QAAjC,CAA2CN,QAAQ,CAACG,OAApD,CACD,CACF,CAJD,CAIG,EAJH,CAKD,C","sourcesContent":["import { isEqual, differenceWith } from 'lodash'\nimport { useMemo, useEffect, useRef } from 'react'\nimport { watchEvents, unWatchEvents } from './actions/query'\nimport { getEventsFromInput, invokeArrayQuery } from './utils'\nimport useFirebase from './useFirebase'\n\n/**\n * @name useFirebaseConnect\n * @description Hook that automatically listens/unListens\n * to provided firebase paths using React's useEffect hook.\n * @param {Object|String|Function|Array} queriesConfigs - Object, string, or\n * array contains object or string for path to sync from Firebase or null if\n * hook doesn't need to sync. Can also be a function that returns an object,\n * a path string, or array of an object or a path string.\n * @example <caption>Ordered Data</caption>\n * import { compose } from 'redux'\n * import { connect } from 'react-redux'\n * import { firebaseUseConnect } from 'react-redux-firebase'\n *\n * const enhance = compose(\n *   connect((state) => ({\n *     todos: state.firebase.ordered.todos\n *   }))\n * )\n *\n * // use enhnace to pass todos list as props.todos\n * function Todos({ todos })) {\n *   useFirebaseConnect('todos') // sync /todos from firebase into redux\n *   return (\n *     <div>\n *       {JSON.stringify(todos, null, 2)}\n *     </div>\n *   )\n * }\n *\n * export default enhance(Todos)\n * @example <caption>Data that depends on props</caption>\n * import { compose } from 'redux'\n * import { useSelector } from 'react-redux'\n * import { firebaseUseConnect } from 'react-redux-firebase'\n *\n * function Post({ postId }) {\n *   useFirebaseConnect(`posts/${postId}`) // sync /posts/postId from firebase into redux\n *   const post = useSelector(({ firebase }) => state.firebase.ordered.posts && state.firebase.ordered.posts[postId])\n *   return (\n *     <div>\n *       {JSON.stringify(post, null, 2)}\n *     </div>\n *   )\n * }\n *\n * export default enhance(Post)\n * @example <caption>Data that depends on props, an array as a query</caption>\n * import { compose } from 'redux'\n * import { useSelector } from 'react-redux'\n * import { firebaseUseConnect, getVal } from 'react-redux-firebase'\n *\n * function Post({ post, postId }) {\n *   useFirebaseConnect([`posts/${postId}`], [postId]) // sync /posts/postId from firebase into redux\n *   const post = useSelector(state => {\n *     return state.firebase.ordered.posts && state.firebase.ordered.posts[postId]\n *   })\n *   return (\n *     <div>\n *       {JSON.stringify(post, null, 2)}\n *     </div>\n *   )\n * }\n *\n * export default Post\n */\nexport default function useFirebaseConnect(querySettings) {\n  const firebase = useFirebase()\n  const eventRef = useRef()\n  const dataRef = useRef()\n\n  const data = useMemo(() => invokeArrayQuery(querySettings), [querySettings])\n\n  useEffect(\n    () => {\n      if (data !== null && !isEqual(data, dataRef.current)) {\n        const itemsToSubscribe = differenceWith(data, dataRef.current, isEqual)\n        const itemsToUnsubscribe = differenceWith(\n          dataRef.current,\n          data,\n          isEqual\n        )\n\n        dataRef.current = data\n        // UnWatch all current events\n        unWatchEvents(\n          firebase,\n          firebase.dispatch,\n          getEventsFromInput(itemsToUnsubscribe)\n        )\n        // Get watch events from new data\n        eventRef.current = getEventsFromInput(data)\n\n        // Watch new events\n        watchEvents(\n          firebase,\n          firebase.dispatch,\n          getEventsFromInput(itemsToSubscribe)\n        )\n      }\n    },\n    [data]\n  )\n\n  // Emulate componentWillUnmount\n  useEffect(() => {\n    return () => {\n      unWatchEvents(firebase, firebase.dispatch, eventRef.current)\n    }\n  }, [])\n}\n"],"file":"useFirebaseConnect.js"}